name: Main

on:
  push:

jobs:

  generate-deploy-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Generate matrix
        id: set-matrix
        run: |
          json="{\"include\": [{\"service\": \"alpha\"},{\"service\": \"beta\"}]}"
          echo "matrix=${json}" >> ${GITHUB_OUTPUT}


  deploy-all:
    needs: [generate-deploy-matrix]
    runs-on: ubuntu-latest
    if: needs.generate-matrix.outputs.matrix != ''
    strategy:
      fail-fast: false
      max-parallel: 6
      matrix: ${{ fromJSON(needs.generate-matrix.outputs.matrix) }}

    steps:
      - run: |
          echo "deploy :${{ matrix.service }}:"
          if [ "${{ matrix.service }}" == "alpha" ]; then
            exit 42
          else
            exit 0
          fi


  result:
    needs: [deploy-all]
    runs-on: ubuntu-latest
    steps:
      - run:
          echo "Got to here"



#const matrixList = ['package-a', 'package-b', 'package-c'].map((pkg) => ({
#  package: pkg,
#}));
#const includeStatement = { include: matrixList };
#console.log(`::set-output name=matrix::${includeStatement}`);
